#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
UASSET_DIR="/storage/emulated/0/PUBGPASTER/PG_PASTER/UASSET"
UEXP_DIR="/storage/emulated/0/PUBGPASTER/PG_PASTER/UEXP"
MERGED_DIR="/storage/emulated/0/PUBGPASTER/PG_PASTER/MERGED_FILES"

# Create necessary directories if they don't exist
for dir in "$OUTPUT_DIR" "$INPUT_DIR" "$UASSET_DIR" "$UEXP_DIR" "$MERGED_DIR"; do
    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir"
    fi
done

unpacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    echo "Unpacking successful!"
  else
    echo "Unpacking failed!"
  fi
}

repacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    echo "Repacking successful!"
  else
    echo "Repacking failed!"
  fi
}

search_in_output () {
  read -p "Enter the text to search for: " search_text
  grep -R "$search_text" "$OUTPUT_DIR"
}

merge_files () {
  python3 - <<END
import os

input_directories = {
    'uasset': '/storage/emulated/0/PUBGPASTER/PG_PASTER/UASSET/',
    'uexp': '/storage/emulated/0/PUBGPASTER/PG_PASTER/UEXP/'
}

output_directory = "/storage/emulated/0/PUBGPASTER/PG_PASTER/MERGED_FILES/"

def merge_files(input_directory, output_file, file_extension):
    try:
        os.makedirs(input_directory, exist_ok=True)
        os.makedirs(output_directory, exist_ok=True)

        with open(output_file, "wb") as merged_file:
            for root, _, files in os.walk(input_directory):
                for filename in files:
                    if filename.endswith(file_extension):
                        file_path = os.path.join(root, filename)
                        with open(file_path, "rb") as file:
                            merged_file.write(file.read())
        print(f"Merge successful! Merged file saved at: {output_file}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

merge_files(input_directories['uasset'], os.path.join(output_directory, "Pubgpaster.uasset"), ".uasset")
merge_files(input_directories['uexp'], os.path.join(output_directory, "Pubgpaster.uexp"), ".uexp")

def merge_both():
    merge_files(input_directories['uasset'], os.path.join(output_directory, "Pubgpaster.uasset"), ".uasset")
    merge_files(input_directories['uexp'], os.path.join(output_directory, "Pubgpaster.uexp"), ".uexp")

merge_both()
END
}

function unpack {
  prompt="Please select a file to unpack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        unpacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

function repack {
  prompt="Please select a file to repack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        repacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

function merge {
  prompt="Please select the type of files to merge:"
  options=("uasset" "uexp" "Both" "Quit")

  PS3="$prompt "
  select opt in "${options[@]}"; do 
    case $opt in
        "uasset")
            merge_files "uasset"
            break
            ;;
        "uexp")
            merge_files "uexp"
            break
            ;;
        "Both")
            merge_files "both"
            break
            ;;
        "Quit")
            break
            ;;
        *) echo "Invalid option $REPLY";;
    esac
  done
}

PS3='Please enter your choice: '
options=("Unpack" "Repack" "Search in Output" "Merge Files" "Quit")
select opt in "${options[@]}"; do
    case $opt in
        "Unpack")
            unpack
            break
            ;;
        "Repack")
            repack
            ;;
        "Search in Output")
            search_in_output
            ;;
        "Merge Files")
            merge
            ;;
        "Quit")
            break
            ;;
        *) echo "Invalid option $REPLY";;
    esac
done
