#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
LOG_FILE="/storage/emulated/0/PUBGPASTER/log.txt"
BACKUP_DIR="/storage/emulated/0/PUBGPASTER/backup"

# Create directories if they don't exist
for dir in "$OUTPUT_DIR" "$INPUT_DIR" "$BACKUP_DIR"; do
    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir" || { echo "Failed to create directory $dir"; exit 1; }
    fi
done

# Log actions with timestamp
log_action() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Show progress spinner
show_progress() {
    local pid=$!
    local delay=0.1
    local spinstr='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    echo -n "Processing..."
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    echo -e " ${LIGHTGREEN}Done!${NOCOLOR}"
}

# Validate .pak file
validate_file() {
    if [[ "$1" != *.pak ]]; then
        echo "Invalid file type: $1"
        log_action "Invalid file type: $1"
        exit 1
    fi
}

# Backup original file
backup_file() {
    cp "$1" "$BACKUP_DIR" || { echo "Failed to backup $1"; exit 1; }
    log_action "Backup created for $1"
}

# Unpack files with timeout
unpacking () {
    validate_file "$opt"
    backup_file "$opt"
    timeout 300 qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR" &
    show_progress
    if [ $? -eq 0 ]; then
        echo "Unpacking successful!"
        log_action "Unpacking successful for $opt"
    else
        echo "Unpacking failed or timed out!"
        log_action "Unpacking failed or timed out for $opt"
    fi
}

# Repack files with timeout
repacking () {
    validate_file "$opt"
    timeout 300 qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$OUTPUT_DIR" &
    show_progress
    if [ $? -eq 0 ]; then
        echo "Repacking successful!"
        log_action "Repacking successful for $opt"
    else
        echo "Repacking failed or timed out!"
        log_action "Repacking failed or timed out for $opt"
    fi
}

# Search for text in output directory
search_in_output () {
    read -p "Enter the text to search for: " search_text
    grep -R "$search_text" "$OUTPUT_DIR" || { echo "Search failed"; exit 1; }
}

# Cleanup temporary files
cleanup() {
    rm -rf "$OUTPUT_DIR"/*
    log_action "Cleaned up output directory"
}

# Display help
show_help() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  unpack    Unpack a .pak file"
    echo "  repack    Repack a .pak file"
    echo "  search    Search for text in output directory"
    echo "  cleanup   Clean up temporary files"
    echo "  help      Show this help message"
}

# Function to unpack selected file
function unpack {
    prompt="Please select a file to unpack:"
    options=( $(find "$INPUT_DIR" -name "*.pak") )

    PS3="$prompt "
    select opt in "${options[@]}" "Quit"; do 
        if (( REPLY == 1 + ${#options[@]} )); then
            exit
        elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
            echo "You picked $opt which is file $REPLY"
            unpacking
        else
            echo "Invalid option. Please try again."
        fi
    done
}

# Main script logic
case "$1" in
    unpack) unpack ;;
    repack) repacking ;;
    search) search_in_output ;;
    cleanup) cleanup ;;
    help) show_help ;;
    *) echo "Invalid option. Use 'help' to see available options." ;;
esac
