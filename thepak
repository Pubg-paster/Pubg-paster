#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
START_TIME=$(date +%s)

# Create directories if they don't exist
if [[ ! -d "$OUTPUT_DIR" ]]; then
    mkdir -p "$OUTPUT_DIR" || handle_error "Failed to create output directory"
fi

if [[ ! -d "$INPUT_DIR" ]]; then
    mkdir -p "$INPUT_DIR" || handle_error "Failed to create input directory"
fi

# Logging function
log_action() {
    local LOG_DIR="/storage/emulated/0/PUBGPASTER/logs"
    mkdir -p "$LOG_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/script.log"
}

# Error handling function
handle_error() {
    echo "An error occurred: $1"
    log_action "Error: $1"
    exit 1
}

# Validate input function
validate_input() {
    if [[ -z "$1" ]]; then
        handle_error "Input cannot be empty. Please provide a valid input."
    fi
}

# Progress indicator function
show_progress() {
    trap "kill $PROGRESS_PID 2>/dev/null" EXIT
    while :; do
        for s in / - \\ \|; do
            printf "\r$s"
            sleep 0.1
        done
    done
}

# Function to check if the trial period has expired
check_trial_period() {
    local current_time=$(date +%s)
    local elapsed_time=$((current_time - START_TIME))
    if (( elapsed_time > 300 )); then
        prompt_for_password
    fi
}

# Function to prompt for password
prompt_for_password() {
    local correct_password="1234"  # Password set to 1234
    read -p "Enter password to continue: " entered_password  # Password input visible
    echo
    if [[ "$entered_password" != "$correct_password" ]]; then
        handle_error "Incorrect password. Exiting."
    fi
}

# Function to unpack files
unpacking() {
    show_progress &
    PROGRESS_PID=$!
    if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
        kill $PROGRESS_PID
        echo "Unpacking successful!"
        log_action "Unpacking successful for $opt"
    else
        kill $PROGRESS_PID
        handle_error "Unpacking failed for $opt"
    fi
}

# Function to repack files
repacking() {
    show_progress &
    PROGRESS_PID=$!
    if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$OUTPUT_DIR"; then
        kill $PROGRESS_PID
        echo "Repacking successful!"
        log_action "Repacking successful for $opt"
    else
        kill $PROGRESS_PID
        handle_error "Repacking failed for $opt"
    fi
}

# Function to search in output
TEXTsearch() {
    read -p "Enter the text to search for: " search_text
    validate_input "$search_text"
    grep -R "$search_text" "$OUTPUT_DIR"
    log_action "Search performed for text: $search_text"
}

# Function to clean up temporary files
cleanup() {
    rm -rf "$OUTPUT_DIR/tmp"
    echo "Temporary files cleaned up."
    log_action "Temporary files cleaned up."
}

# Function to unpack files interactively
function unpack {
    prompt="Please select a file to unpack:"
    options=( $(find "$INPUT_DIR" -name "*.pak") )

    PS3="$prompt "
    select opt in "${options[@]}" "Quit"; do 
        if (( REPLY == 1 + ${#options[@]} )); then
            exit
        elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
            echo "You picked $opt which is file $REPLY"
            unpacking
            break
        else
            echo "Invalid option. Try another one."
        fi
    done
}

# Function to repack files interactively
function repack {
    prompt="Please select a file to repack:"
    options=( $(find "$INPUT_DIR" -name "*.pak") )

    PS3="$prompt "
    select opt in "${options[@]}" "Quit"; do 
        if (( REPLY == 1 + ${#options[@]} )); then
            exit
        elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
            echo "You picked $opt which is file $REPLY"
            repacking
            break
        else
            echo "Invalid option. Try another one."
        fi
    done
}

# Main script logic
while true; do
    check_trial_period
    # Your main script logic here
    sleep 1
done
