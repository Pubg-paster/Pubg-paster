#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
TIME_LIMIT=300  # Time limit in seconds (5 minutes)
PASSWORD="1234"  # Set your password here
START_TIME_FILE="/storage/emulated/0/PUBGPASTER/start_time"

# Function to create directories if they don't exist
create_dir() {
    if [[ ! -d "$1" ]]; then
        mkdir -p "$1"
    fi
}

create_dir "$OUTPUT_DIR"
create_dir "$INPUT_DIR"

# Logging function
log_action() {
    local LOG_DIR="/storage/emulated/0/PUBGPASTER/logs"
    create_dir "$LOG_DIR"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_DIR/script.log"
}

# Error handling function
handle_error() {
    echo "An error occurred: $1"
    log_action "Error: $1"
    exit 1
}

# Validate input function
validate_input() {
    if [[ -z "$1" ]]; then
        handle_error "Input cannot be empty. Please provide a valid input."
    fi
}

# Progress indicator function
show_progress() {
    while :; do
        for s in / - \\ \|; do
            printf "\r$s"
            sleep 0.1
        done
    done
}

# Function to check time limit
check_time_limit() {
    if [[ -f "$START_TIME_FILE" ]]; then
        START_TIME=$(cat "$START_TIME_FILE")
        CURRENT_TIME=$(date +%s)
        ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
        if (( ELAPSED_TIME > TIME_LIMIT )); then
            read -p "Enter password to continue: " input_password
            if [[ "$input_password" != "$PASSWORD" ]]; then
                handle_error "Incorrect password. Access denied."
            fi
        fi
    else
        date +%s > "$START_TIME_FILE"
    fi
}

check_time_limit

# Function to unpack files
unpacking() {
    show_progress &
    PROGRESS_PID=$!
    if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
        kill $PROGRESS_PID
        echo "Unpacking successful!"
        log_action "Unpacking successful for $opt"
    else
        kill $PROGRESS_PID
        handle_error "Unpacking failed for $opt"
    fi
}

# Function to repack files
repacking() {
    show_progress &
    PROGRESS_PID=$!
    if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$OUTPUT_DIR"; then
        kill $PROGRESS_PID
        echo "Repacking successful!"
        log_action "Repacking successful for $opt"
    else
        kill $PROGRESS_PID
        handle_error "Repacking failed for $opt"
    fi
}

# Function to search in output
TEXTsearch() {
    read -p "Enter the text to search for: " search_text
    validate_input "$search_text"
    grep -R "$search_text" "$OUTPUT_DIR"
    log_action "Search performed for text: $search_text"
}

# Function to clean up temporary files
cleanup() {
    rm -rf "$OUTPUT_DIR/tmp"
    echo "Temporary files cleaned up."
    log_action "Temporary files cleaned up."
}

# Function to unpack files interactively
function unpack {
    prompt="Please select a file to unpack:"
    options=( $(find "$INPUT_DIR" -name "*.pak") )

    PS3="$prompt "
    select opt in "${options[@]}" "Quit"; do 
        if (( REPLY == 1 + ${#options[@]} )); then
            exit
        elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
            echo "You picked $opt which is file $REPLY"
            unpacking
            break
        else
            echo "Invalid option. Try another one."
        fi
    done
}

# Function to repack files interactively
function repack {
    prompt="Please select a file to repack:"
    options=( $(find "$INPUT_DIR" -name "*.pak") )

    PS3="$prompt "
    select opt in "${options[@]}" "Quit"; do 
        if (( REPLY == 1 + ${#options[@]} )); then
            exit
        elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
            echo "You picked $opt which is file $REPLY"
            repacking
            break
        else
            echo "Invalid option. Try another one."
        fi
    done
}

# Main menu function
main_menu() {
    echo "Main Menu"
    echo "1. Unpack files"
    echo "2. Repack files"
    echo "3. Search in output"
    echo "4. Clean up temporary files"
    echo "5. Quit"
    read -p "Enter your choice: " choice
    case $choice in
        1) unpack ;;
        2) repack ;;
        3) TEXTsearch ;;
        4) cleanup ;;
        5) exit ;;
        *) echo "Invalid choice. Please try again." ;;
    esac
}

main_menu
