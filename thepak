#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"

# Create directories if they don't exist
if [[ ! -d "$OUTPUT_DIR" ]]; then
    mkdir -p "$OUTPUT_DIR"
fi

if [[ ! -d "$INPUT_DIR" ]]; then
    mkdir -p "$INPUT_DIR"
fi

# Function to log actions
log_action() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> script.log
}

# Function to handle errors
handle_error() {
    echo "An error occurred: $1"
    log_action "Error: $1"
    exit 1
}

# Function to validate input
validate_input() {
    if [[ -z "$1" ]]; then
        handle_error "Input cannot be empty. Please provide a valid input."
    fi
}

# Function to show progress
show_progress() {
  while :; do
    for s in / - \\ \|; do
      printf "\r$s"
      sleep 0.1
    done
  done
}

# Function to prompt for password after 5 minutes
password_protect() {
    echo "The script will prompt for a password in 5 minutes..."
    sleep 300  # Wait for 5 minutes (300 seconds)

    read -sp "Enter password: " password
    echo

    if [[ "$password" != "1234" ]]; then
        handle_error "Incorrect password."
    fi

    log_action "Password confirmed. Access granted."
}

# Call the password protection function after 5 minutes
password_protect &

# Function to unpack files
unpacking() {
  show_progress &
  PROGRESS_PID=$!
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    kill $PROGRESS_PID
    echo "Unpacking successful!"
    log_action "Unpacking successful for $opt"
  else
    kill $PROGRESS_PID
    handle_error "Unpacking failed for $opt"
  fi
}

# Function to repack files
repacking() {
  show_progress &
  PROGRESS_PID=$!
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    kill $PROGRESS_PID
    echo "Repacking successful!"
    log_action "Repacking successful for $opt"
  else
    kill $PROGRESS_PID
    handle_error "Repacking failed for $opt"
  fi
}

# Function to search in output
search_in_output() {
  read -p "Enter the text to search for: " search_text
  validate_input "$search_text"
  grep -R "$search_text" "$OUTPUT_DIR"
  log_action "Search performed for text: $search_text"
}

# Function to clean up temporary files
cleanup() {
  rm -rf "$OUTPUT_DIR/tmp"
  echo "Temporary files cleaned up."
  log_action "Temporary files cleaned up."
}

# Function to show help menu
show_help() {
  echo "Usage: ./script.sh [option]"
  echo "Options:"
  echo "  unpack   Unpack files"
  echo "  repack   Repack files"
  echo "  search   Search in output"
  echo "  help     Show this help menu"
  echo "  cleanup  Clean up temporary files"
}

# Function to unpack files interactively
function unpack {
  prompt="Please select a file to unpack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        unpacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

# Function to repack files interactively
function repack {
  prompt="Please select a file to repack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        repacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

# Interactive mode for user input
interactive_mode() {
  while true; do
    echo "Choose an option:"
    echo "1. Unpack"
    echo "2. Repack"
    echo "3. Search"
    echo "4. Cleanup"
    echo "5. Help"
    echo "6. Quit"
    read -p "Enter choice: " choice
    validate_input "$choice"
    case $choice in
      1) unpack ;;
      2) repack ;;
      3) search_in_output ;;
      4) cleanup ;;
      5) show_help ;;
      6) exit ;;
      *) echo "Invalid choice" ;;
    esac
  done
}

# Main menu for script execution
PS3='Please enter your choice: '
options=("Unpack" "Repack" "Search in Output" "Cleanup" "Help" "Quit")
select opt in "${options[@]}"; do
  case $opt in
    "Unpack")
      unpack
      break
      ;;
    "Repack")
      repack
      ;;
    "Search in Output")
      search_in_output
      ;;
    "Cleanup")
      cleanup
      ;;
    "Help")
      show_help
      ;;
    "Quit")
      break
      ;;
    *) echo "Invalid option $REPLY";;
  esac
done
