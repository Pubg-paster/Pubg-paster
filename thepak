
#!/usr/bin/env bash

source etc/banner
# Banner Add
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

# Define number of days for expiration and extension
DAYS_TO_EXPIRE=1
EXTENSION_DAYS=1
PASSWORD="173314"

# Define absolute path for installation date file
INSTALLATION_DATE_FILE="/var/tmp/installation_date.txt"

# Function to set installation date
set_installation_date() {
    echo "$(date +%F)" > "$INSTALLATION_DATE_FILE"
}

# Function to check and handle expiration
check_expiration() {
    # Check if installation date file exists
    if [[ ! -f "$INSTALLATION_DATE_FILE" ]]; then
        set_installation_date
        echo "Installation date set."
        exit 0
    fi

    # Read installation date
    CREATION_DATE=$(cat "$INSTALLATION_DATE_FILE")
    TODAY_DATE=$(date +%F)
    EXPIRATION_DATE=$(date -d "$CREATION_DATE + $DAYS_TO_EXPIRE days" +%F)
    EXTENSION_DATE=$(date -d "$EXPIRATION_DATE + $EXTENSION_DAYS days" +%F)

    # Check if the current date is past the expiration date
    if [[ $(date -d "$TODAY_DATE" +%s) -gt $(date -d "$EXPIRATION_DATE" +%s) ]]; then
        if [[ $(date -d "$TODAY_DATE" +%s) -gt $(date -d "$EXTENSION_DATE" +%s) ]]; then
            echo "The script has expired and cannot be used after $EXTENSION_DATE."
            exit 1
        else
            echo "The script has expired, but you can extend its use for one more day by entering the password."

            # Prompt for password
            read -sp "Enter password to extend script use: " input_password
            echo

            if [[ "$input_password" != "$PASSWORD" ]]; then
                echo "Incorrect password. Exiting."
                exit 1
            fi
        fi
    fi
}

# Call the function to check expiration
check_expiration

# Source the banner script
source etc/banner || { echo "Banner file not found"; exit 1; }

# Add Banner
echo -e "executing: ${LIGHTGREEN} Pubg-paster${NOCOLOR}"
echo "-----------------------"

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
TEMP_OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/ADD_MODDED_FILES"

if [[ ! -d "$OUTPUT_DIR" ]]; then
    mkdir -p "$OUTPUT_DIR"
fi

if [[ ! -d "$INPUT_DIR" ]]; then
    mkdir -p "$INPUT_DIR"
fi

if [[ ! -d "$TEMP_OUTPUT_DIR" ]]; then
    mkdir -p "$TEMP_OUTPUT_DIR"
fi

unpacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    echo "Unpacking successful!"
  else
    echo "Unpacking failed!"
  fi
}

repacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$TEMP_OUTPUT_DIR"; then
    echo "Repacking successful!"
  else
    echo "Repacking failed!"
  fi
}

function unpack {
  prompt="Please select a file to unpack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        unpacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

function repack {
  prompt="Please select a file to repack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  PS3="$prompt "
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo "You picked $opt which is file $REPLY"
        repacking
        break
    else
        echo "Invalid option. Try another one."
    fi
  done
}

PS3='Please enter your choice: '
options=("Unpack" "Repack" "Quit")
select opt in "${options[@]}"; do
    case $opt in
        "Unpack")
            unpack
            break
            ;;
        "Repack")
            repack
            ;;
        "Quit")
            break
            ;;
        *) echo "Invalid option $REPLY";;
    esac
done
