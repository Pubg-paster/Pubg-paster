#!/bin/bash
z='#!/usr/bin/env bash

source etc/banner

# Colors Definition
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LIGHTGREEN='\033[0;92m'
PURPLE='\033[0;35m'
ORANGE='\033[38;5;208m' # Orange
PINK='\033[38;5;213m' # Pink
NOCOLOR='\033[0m' # No Color

# Banner Add
echo -e "${PINK}executing: Pubg-paster${NOCOLOR}"
echo "-----------------------"

# Define number of days for expiration and extension
DAYS_TO_EXPIRE=1
EXTENSION_DAYS=2
PASSWORD="173314"
INSTALLATION_ID_FILE="$HOME/.script_id"
INSTALLATION_DATE_FILE="$HOME/installation_date.txt"
UNIQUE_ID_FILE="$HOME/.unique_id"

# Generate a unique identifier
generate_unique_id() {
    if ! command -v uuidgen &> /dev/null; then
        echo -e "${RED}uuidgen command not found. Please install uuid-runtime.${NOCOLOR}"
        exit 1
    fi
    uuidgen
}

# Function to set installation ID
set_installation_id() {
    UNIQUE_ID=$(generate_unique_id)
    echo "$UNIQUE_ID" > "$INSTALLATION_ID_FILE"
    chmod 000 "$INSTALLATION_ID_FILE"
    echo "$UNIQUE_ID" > "$UNIQUE_ID_FILE"
    chmod 000 "$UNIQUE_ID_FILE"
}

# Function to check installation ID
check_installation_id() {
    if [[ ! -f "$INSTALLATION_ID_FILE" ]]; then
        set_installation_id
        echo -e "${YELLOW}Installation ID set.${NOCOLOR}"
        exit 0
    fi

    if [[ ! -r "$INSTALLATION_ID_FILE" || ! -r "$UNIQUE_ID_FILE" ]]; then
        echo -e "${RED}Permission denied. Cannot read necessary files.${NOCOLOR}"
        exit 1
    fi

    CURRENT_ID=$(cat "$INSTALLATION_ID_FILE" 2>/dev/null)
    UNIQUE_ID=$(cat "$UNIQUE_ID_FILE" 2>/dev/null)

    if [[ "$CURRENT_ID" != "$UNIQUE_ID" ]]; then
        echo -e "${RED}Script cannot be used. Installation ID mismatch.${NOCOLOR}"
        exit 1
    fi
}

# Function to set installation date
set_installation_date() {
    echo "$(date +%F)" > "$INSTALLATION_DATE_FILE"
    chmod 000 "$INSTALLATION_DATE_FILE"
}

# Function to check and handle expiration
check_expiration() {
    if [[ ! -f "$INSTALLATION_DATE_FILE" ]]; then
        set_installation_date
        echo -e "${YELLOW}Installation date set.${NOCOLOR}"
        exit 0
    fi

    if [[ ! -r "$INSTALLATION_DATE_FILE" ]]; then
        echo -e "${RED}Permission denied. Cannot read installation date file.${NOCOLOR}"
        exit 1
    fi

    CREATION_DATE=$(cat "$INSTALLATION_DATE_FILE" 2>/dev/null)
    TODAY_DATE=$(date +%F)
    EXPIRATION_DATE=$(date -d "$CREATION_DATE + $DAYS_TO_EXPIRE days" +%F)
    EXTENSION_DATE=$(date -d "$EXPIRATION_DATE + $EXTENSION_DAYS days" +%F)

    if [[ $(date -d "$TODAY_DATE" +%s) -gt $(date -d "$EXPIRATION_DATE" +%s) ]]; then
        if [[ $(date -d "$TODAY_DATE" +%s) -gt $(date -d "$EXTENSION_DATE" +%s) ]]; then
            echo -e "${RED}The script has expired and cannot be used after $EXTENSION_DATE.${NOCOLOR}"
            exit 1
        else
            echo -e "${YELLOW}The script has expired, but you can extend its use for one more day by entering the password.${NOCOLOR}"

            # Prompt for password
            read -sp "Enter password to extend script use: " input_password
            echo

            if [[ "$input_password" != "$PASSWORD" ]]; then
                echo -e "${RED}Incorrect password. Exiting.${NOCOLOR}"
                exit 1
            fi
        fi
    fi
}

# Function to set read and execute-only permissions on tools.bms
lock_tools_bms() {
    TOOLS_FILE="etc/tools.bms"

    if [[ -f "$TOOLS_FILE" ]]; then
        chmod 555 "$TOOLS_FILE"
        echo -e "${YELLOW}File permissions updated. The tools.bms file is now read and execute-only, but cannot be edited.${NOCOLOR}"
    else
        echo -e "${RED}File $TOOLS_FILE not found.${NOCOLOR}"
    fi
}

# Call the function to lock the tools.bms file
lock_tools_bms

# Call the function to check installation ID
check_installation_id

# Call the function to check expiration
check_expiration

# Source the banner script
source etc/banner || { echo -e "${RED}Banner file not found${NOCOLOR}"; exit 1; }

OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/output"
INPUT_DIR="/storage/emulated/0/PUBGPASTER/INPUT"
TEMP_OUTPUT_DIR="/storage/emulated/0/PUBGPASTER/ADD_MODDED_FILES"

if [[ ! -d "$OUTPUT_DIR" ]]; then
    mkdir -p "$OUTPUT_DIR"
fi

if [[ ! -d "$INPUT_DIR" ]]; then
    mkdir -p "$INPUT_DIR"
fi

if [[ ! -d "$TEMP_OUTPUT_DIR" ]]; then
    mkdir -p "$TEMP_OUTPUT_DIR"
fi

unpacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -Q etc/tools.bms "$opt" "$OUTPUT_DIR"; then
    echo -e "${GREEN}Unpacking successful!${NOCOLOR}"
  else
    echo -e "${RED}Unpacking failed!${NOCOLOR}"
  fi
}

repacking () {
  if qemu-i386 $PREFIX/share/quickbms/quickbms -9 -w -r -r etc/tools.bms "$opt" "$TEMP_OUTPUT_DIR"; then
    echo -e "${GREEN}Repacking successful!${NOCOLOR}"
  else
    echo -e "${RED}Repacking failed!${NOCOLOR}"
  fi
}

function unpack {
  prompt="Please select a file to unpack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  echo -e "${BLUE}-----------------------------------------------${NOCOLOR}"
  echo -e "${PINK}# ${prompt}${NOCOLOR}"
  echo -e "${BLUE}-----------------------------------------------${LIGHTGREEN}"
   PS3=$(echo -e "${PINK}Select a file:${NOCOLOR} ") # NOCOLOR added
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo -e "${ORANGE}You picked $opt which is file $REPLY${NOCOLOR}"
        unpacking
        break
    else
        echo -e "${RED}Invalid option. Try another one.${NOCOLOR}"
    fi
  done
}

function repack {
  prompt="Please select a file to repack:"
  options=( $(find "$INPUT_DIR" -name "*.pak") )

  echo -e "${BLUE}-----------------------------------------------${NOCOLOR}"
  echo -e "${PINK}# ${prompt}${NOCOLOR}"
  echo -e "${BLUE}-----------------------------------------------${YELLOW}"
   PS3=$(echo -e "${PINK}Select a file:${NOCOLOR} ")
  select opt in "${options[@]}" "Quit"; do 
    if (( REPLY == 1 + ${#options[@]} )); then
        exit
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
        echo -e "${ORANGE}You picked $opt which is file $REPLY${NOCOLOR}"
        repacking
        break
    else
        echo -e "${RED}Invalid option. Try another one.${NOCOLOR}"
    fi
  done
}

# Main menu loop
while true; do
    echo -e "${BLUE}--------------------------------------------${NOCOLOR}"
    echo -e "${PINK}# Please enter your choice:${NOCOLOR}"
    echo -e "${GREEN}# 1. Unpack${NOCOLOR} ${YELLOW}# 2. Repack${NOCOLOR} ${RED}# 3. Quit${NOCOLOR}"
    echo -e "${BLUE}--------------------------------------------${NOCOLOR}"
    read -p "Enter your choice [1-2-3]: " choice

    case $choice in
        1)
            unpack
            ;;
        2)
            repack
            ;;
        3)
            echo -e "${GREEN}Exiting...${NOCOLOR}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice. Please enter a number between 1 and 3.${NOCOLOR}"
            ;;
    esac
done'
eval "$(echo $z | base64 -d)"
